import cv2
import numpy as np
from io import BytesIO
from PIL import Image


def blob_to_image(blob_data):
    try:
        # Преобразуем blob в массив байт
        ls = blob_data[1:].split(";")
        byte_array = bytearray()
        for _ in ls:
            byte_array += int(_).to_bytes(1, byteorder='big')

        # Преобразуем массив байт в numpy-массив
        np_array = np.asarray(byte_array, dtype=np.uint8)

        # Проверяем, что массив не пустой
        if np_array.size > 0:
            # Читаем изображение из numpy-массива
            image = cv2.imdecode(np_array, cv2.IMREAD_COLOR)

            # Проверяем, что изображение успешно прочитано
            if image is not None:
                # Преобразуем изображение в формат PIL
                pil_image = Image.fromarray(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
                pil_image.save("ths.jpg")
                return pil_image
            else:
                print("Ошибка: Изображение не удалось прочитать.")
        else:
            print("Ошибка: Массив байт пустой.")
    except Exception as e:
        print(f"Произошла ошибка: {e}")



# # Пример использования
# image_path = "Mikhail.jpg"
# print(image_to_blob(image_path)[:100])
# blob_data = image_to_blob(image_path)
# #blob_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\xf4\x00\x00\x01\xf4\x08\x06\x00\x00\x00\x8d\xf4\x85\xd1\x00\x00\x00\tpHYs\x00\x00\x0e\xc3\x00\x00\x0e\xc3\x01\xc7o\xa8d\x00\x00\x00\tpIDATx\xdac\xfc\xff\xff\x0f\xff\xc1[\x14]\x01\x1aD\xd1!0(\xe4)\x95R\xa4\x02\x8a\x88Q\x0c\xabC\xa4$g\xb0L\xd1\x17\xa9\x88\xe2\xb2H\x11\x8a*\x92%\xf6!\xda\xa5G\x04K\xe9*\xc7\xe4\x03#\xa4b\xb0bH\xc8b\xb6 \x84F\x14\xa8%\x1eO\xd0HdL$\x92#\x1cJ\xa1Z\xb4d\x16\tR\xb0\'\xf6W\t\xb8\xb1\xf2\xc5\x82\x87v\xc8L\xb9&\xd4\x17\t\xb1p\xcd!\x1c)\xf1\x80\x16\xc1\xd1Jb\x86\x8eD\x01\xd5\xd2\xb4$\x93J\xad\xf7\xa1\x96\r\xe3\x86\x9e\xe7\x01\x06Q\xc9r\xc2Ig\x0f}\xb0\xd8\xe8\xd0\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd8\xd'
#
# blob_to_image(blob_data)